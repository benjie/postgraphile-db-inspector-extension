import {getApolloClient} from '@/vue-apollo'
import writeArtifacts from '@/gql/mutation/writeArtifacts.graphql'
import computeMasterSecurityPolicy from '@/scriptCompute/computeMasterSecurityPolicy'
import computeOwnershipPolicy from '@/scriptCompute/computeOwnershipPolicy'
import computeSchemaUsageSql from '@/scriptCompute/computeSchemaUsageSql'
import computeMasterTablePolicy from '@/scriptCompute/computeMasterTablePolicy'
import computeMasterFunctionPolicy from '@/scriptCompute/computeMasterFunctionPolicy'
import computeAllSchemaTablePolicies from '@/scriptCompute/computeAllSchemaTablePolicies'
import computeAllSchemaFunctionPolicies from '@/scriptCompute/computeAllSchemaFunctionPolicies'

function getFormattedDate() {
  return (new Date()).toString()
}

function addTag(script) {
  const tag = `-- THIS SCRIPT WAS GENERATED BY PGDBI at ${getFormattedDate()} --`

  return `${tag}
  
${script}`
}

async function writeToDisk({state}) {
  const apolloClient = getApolloClient()
  const masterSecurityPolicy = addTag(computeMasterSecurityPolicy(state))
  const ownershipPolicy = addTag(computeOwnershipPolicy(state))
  const schemaUsageSql = addTag(computeSchemaUsageSql(state))
  const masterTablePolicy = addTag(computeMasterTablePolicy(state).policy)
  const masterFunctionPolicy = addTag(computeMasterFunctionPolicy(state).policy)
  const allSchemaTablePolicies = computeAllSchemaTablePolicies(state)
  const allSchemaFunctionPolicies = computeAllSchemaFunctionPolicies(state)

  const result = await apolloClient.mutate({
    mutation: writeArtifacts,
    variables: {
      projectState: state,
      masterSecurityPolicy: masterSecurityPolicy,
      ownershipPolicy: ownershipPolicy,
      schemaUsageSql: schemaUsageSql,
      masterTablePolicy: masterTablePolicy,
      masterFunctionPolicy: masterFunctionPolicy,
      allSchemaTablePolicies: allSchemaTablePolicies,
      allSchemaFunctionPolicies: allSchemaFunctionPolicies
    }
  })
  state.isDirty = false
  return result.data.WriteArtifacts.result
}

export default writeToDisk;
