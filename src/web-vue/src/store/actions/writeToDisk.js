import {getApolloClient} from '@/vue-apollo'
import writeArtifacts from '@/gql/mutation/writeArtifacts.graphql'
import computeMasterSecurityPolicy from '@/scriptCompute/computeMasterSecurityPolicy'
import computeOwnershipPolicy from '@/scriptCompute/computeOwnershipPolicy'
import computeSchemaUsageSql from '@/scriptCompute/computeSchemaUsageSql'
import computeMasterTablePolicy from '@/scriptCompute/computeMasterTablePolicy'
import computeMasterFunctionPolicy from '@/scriptCompute/computeMasterFunctionPolicy'
import computeAllSchemaTablePolicies from '@/scriptCompute/computeAllSchemaTablePolicies'
import computeAllSchemaFunctionPolicies from '@/scriptCompute/computeAllSchemaFunctionPolicies'

function getFormattedDate() {
  var date = new Date();
  var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +  date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

  return str;
}

function tagScript(content) {
  return`
-- THIS SCRIPT WAS GENERATED BY PGDBI at ${getFormattedDate()} --
${content}
`
}

async function writeToDisk({state}) {
  const apolloClient = getApolloClient()

  const masterSecurityPolicy = tagScript(computeMasterSecurityPolicy(state))
  const ownershipPolicy = computeOwnershipPolicy(state)
  const schemaUsageSql = computeSchemaUsageSql(state)
  const masterTablePolicy = computeMasterTablePolicy(state)
  const masterFunctionPolicy = computeMasterFunctionPolicy(state)
  const allSchemaTablePolicies = computeAllSchemaTablePolicies(state)
  const allSchemaFunctionPolicies = computeAllSchemaFunctionPolicies(state)

  const result = await apolloClient.mutate({
    mutation: writeArtifacts,
    variables: {
      projectState: state,
      masterSecurityPolicy: masterSecurityPolicy,
      ownershipPolicy: ownershipPolicy,
      schemaUsageSql: schemaUsageSql,
      masterTablePolicy: masterTablePolicy.policy,
      masterFunctionPolicy: masterFunctionPolicy.policy,
      allSchemaTablePolicies: allSchemaTablePolicies,
      allSchemaFunctionPolicies: allSchemaFunctionPolicies
    }
  })
  state.isDirty = false
  return result.data.WriteArtifacts.result
}

export default writeToDisk;
